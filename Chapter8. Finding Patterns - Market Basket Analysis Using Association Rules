###############################################################################
##Chapter8. Finding Patterns - Market Basket Analysis Using Association Rules##
###############################################################################


##Data preparation##
#각 행별로 한번의 transaction에 구매한 모든 item들이 써져 있는 transaction data의 경우, 열의 갯수도 다르고
#각 변수간의 관계를 찾는게 아니라 item들간의 관계를 찾아야 한다.
#또 행마다 구매한 item 갯수가 달라서 첫 행보다 만흥ㄴ item을 산 경우 다음 행으로 넘어가 버린다.
#따라서 모든 item을 column으로 갖는 sparse matrix를 만들어야 함. -> arules package 이용

install.packages("arules")
library(arules)

#arules 패키지의 read.transactions() 함수를 사용하고, csv 파일을 불러와야하는데 comma로 구분되어 있으므로
#sep="," 를 써준다.

groceries <- read.transactions("groceries.csv", sep=",")

summary(groceries)
transactions as itemMatrix in sparse format with
9835 rows (elements/itemsets/transactions) and
169 columns (items) and a density of 0.02609146 
#9835개의 transaction, 169개의 item, density : sparse matrix에서 nonzero cell의 비율.
#-> matrix에 9835*169=1,662,115개의 cell이 있고,
#1,662,115*0.02609146=43,367은 30일동안 구매된 item의 총 갯수.
#average transaction 43,367/9835=4.4 : 평균적으로 4.4개의 item을 사감.

most frequent items:
  whole milk other vegetables       rolls/buns             soda           yogurt          (Other) 
2513             1903             1809             1715             1372            34055 
#제일 많이 나온 아이템들

element (itemset/transaction) length distribution:
  sizes
1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   26   27   28 
2159 1643 1299 1005  855  645  545  438  350  246  182  117   78   77   55   46   29   14   14    9   11    4    6    1    1    1    1 
29   32 
3    1 

Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1.000   2.000   3.000   4.409   6.000  32.000
#아이템 1개 구매한 transaction이 2159, 2개가 1643, ..... 32개 구매한 사람 한명.
#25퍼센트의 transaction에서 아이템이 한개 아니면 두개 구매되었음.

#sparse matrix의 contents 보기
inspect(groceries[1:5])
items                                                                
[1] {citrus fruit,margarine,ready soups,semi-finished bread}             
[2] {coffee,tropical fruit,yogurt}                                       
[3] {whole milk}                                                         
[4] {cream cheese,meat spreads,pip fruit,yogurt}                         
[5] {condensed milk,long life bakery product,other vegetables,whole milk}

#각 아이템의 frequency 확인

itemFrequency(groceries[,1:3])
abrasive cleaner artif. sweetener   baby cosmetics 
0.0035587189     0.0032536858     0.0006100661 
#각 아이템들은 알파벳순으로 sorting 되어서 matrix 안에 들어가있다.

#100개의 transaction 안에서 frequency를 확인
itemFrequency(groceries[1:100,1:3])
abrasive cleaner artif. sweetener   baby cosmetics 
0.02             0.01             0.00 


##Visualizing item support - item frequency plots

itemFrequencyPlot(groceries, support=0.1)
#빈도가 적어도 10퍼센트 이상 되는 품목들을 데려옴.

itemFrequencyPlot(groceries, topN=20)
#빈도가 제일 높은 것부터 순서대로 20개의 품목들을 데려옴.


##Visualizing the transaction data- plotting the sparse matrix
image(groceries[1:5])
#구매된 아이템의 열에 까만표시시
#데이터셋 많을 때는 그닥..
image(sample(groceries, 100))


##training a model on the data : apriori function
apriori(groceries)
set of 0 rules 

#minlen: minimum length(최소 갯수 제한)
groceryrules <- apriori(groceries, parameter = list(support=0.006, confidence=0.25, minlen=2))
groceryrules
#confidence가 너무 낮으면 신뢰가 떨어지고, 너무 커지면 너무 직관적인 rule이 나오므로 주의해야함.


##evaluating model performance

summary(groceryrules)
set of 463 rules

rule length distribution (lhs + rhs):sizes
2   3   4 
150 297  16 

Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
2.000   2.000   3.000   2.711   3.000   4.000 
#left hand side랑 right hand side 합쳐서 아이템의 갯수가 2개가 150, 3개가 297, 4개가 16개.

summary of quality measures:
  support           confidence          lift            count      
Min.   :0.006101   Min.   :0.2500   Min.   :0.9932   Min.   : 60.0  
1st Qu.:0.007117   1st Qu.:0.2971   1st Qu.:1.6229   1st Qu.: 70.0  
Median :0.008744   Median :0.3554   Median :1.9332   Median : 86.0  
Mean   :0.011539   Mean   :0.3786   Mean   :2.0351   Mean   :113.5  
3rd Qu.:0.012303   3rd Qu.:0.4495   3rd Qu.:2.3565   3rd Qu.:121.0  
Max.   :0.074835   Max.   :0.6600   Max.   :3.9565   Max.   :736.0  
#support랑 confidence의 대부분 또는 전체가 내가 설정한 threshold 근처에 분포해 있으면 
#설정을 너무 높게 했다는 뜻이므로 바꾸는게 좋다. 
#이 모델의 경우는 설정보다도 높은 값들이 많이 있으므로 적당함!
#lift : 어떤 item/itemset이 구매 되었을 때 다른 item/itemset이 얼마나 구매되는지를 본다.
#  lift(X->Y) = confidence(X->Y)/support(Y)
#lift(X->Y)가 1보다 크면 두개의 아이템이 각각 나타난 경우보다 같이 나타난 경우가 더 많다는 뜻 -> 좋은정보!


mining info:
  data ntransactions support confidence
groceries          9835   0.006       0.25

inspect(groceryrules[1:3])


##improving model performance

#sorting the set of association rules
inspect(sort(groceryrules, by="lift")[1:5])
lhs                                             rhs                  support     confidence lift     count
[1] {herbs}                                      => {root vegetables}    0.007015760 0.4312500  3.956477 69   
[2] {berries}                                    => {whipped/sour cream} 0.009049314 0.2721713  3.796886 89   
[3] {other vegetables,tropical fruit,whole milk} => {root vegetables}    0.007015760 0.4107143  3.768074 69   
[4] {beef,other vegetables}                      => {root vegetables}    0.007930859 0.4020619  3.688692 78   
[5] {other vegetables,tropical fruit}            => {pip fruit}          0.009456024 0.2634561  3.482649 93   
#[1]의 lift : herbs만 만 사람보다 herbs를 사고 root vegetables를 같이 산 사람이 4배정도 더 많다 -> 매우 유의미함!



#taking subsets of association rules
#berries와 연관이 있는 rule들을 소환
berryrules <- subset(groceryrules, items %in% "berries")
inspect(berryrules)
lhs          rhs                  support     confidence lift     count
[1] {berries} => {whipped/sour cream} 0.009049314 0.2721713  3.796886  89  
[2] {berries} => {yogurt}             0.010574479 0.3180428  2.279848 104  
[3] {berries} => {other vegetables}   0.010269446 0.3088685  1.596280 101  
[4] {berries} => {whole milk}         0.011794611 0.3547401  1.388328 116

#saving association rules to a file or data frame
write(groceryrules, file="groceryrules.csv", sep=",", quote=TRUE, row.names=FALSE)
groceryrules_df <- as(groceryrules, "data.frame")
str(groceryrules_df)
